load("./linear_regression.RData")
ls()
q()
ls()
help.start()
ls()
data_act1_germanio_n <- read.csv("./germanio-n.csv")
data_act1_germanio_n
plot(data_act1_germanio_n$Voltaje_Longitudinal, data_act1_germanio_n$Corriente)
plot(data_act1_germanio_n$Corriente, data_act1_germanio_n$Voltaje_Longitudinal)
q()
data_act1_germanio_p <- read.csv("./germanio-p.csv")
ls()
q()
ls()
rm(data_act1_germanio_n, data_act1_germanio_p)
ls()
q()
ls()
data_Ip_Constante <- read.csv("./general.csv")
head(data_Ip_Constante)
q()
ls()
head(data_Ip_Constante)
data_Ip_Constante$Corriente_Ip <- as.factor(data_Ip_Constante$Corriente_Ip)
q()
ls()
library(tidyverse)
ggplot(data_Corriente_Constante, aes(x=Corriente_Ip, y=Voltaje_Hall, color=Corriente)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~Tipo) + labs(title="Voltaje Hall respecto Corriente Ip", x="Corriente Ip (A)", y = "Voltaje Hall (V)")
ggplot(data_Ip_Constante, aes(x=Corriente_Ip, y=Voltaje_Hall, color=Corriente)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~Tipo) + labs(title="Voltaje Hall respecto Corriente Ip", x="Corriente Ip (A)", y = "Voltaje Hall (V)")
ggplot(data_Ip_Constante, aes(x=Corriente, y=Voltaje_Hall, color=Corriente_Ip)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~Tipo) + labs(title="Voltaje Hall respecto Corriente Bobinas", x="Corriente (A)", y = "Voltaje Hall (V)")
data_Ip_Constante <- read.csv("./general.csv")
data_Ip_Constante$Corriente_Ip <- as.factor(data_Ip_Constante$Corriente_Ip)
ggplot(data_Ip_Constante, aes(x=Corriente, y=Voltaje_Hall, color=Corriente_Ip)) + geom_point() + geom_smooth(method="lm") + facet_wrap(~Tipo) + labs(title="Voltaje Hall respecto Corriente Bobinas", x="Corriente (A)", y = "Voltaje Hall (V)")
ggsave("./VoltajeHallVsCorriente.png")
coeficientes_hall <- data %>%
  group_by(Tipo, Corriente) %>%
  do(model = lm(Voltaje_Hall ~ Corriente, data = .)) %>%
  mutate(
    Pendiente_m = coef(model)[2],
    Intercepto = coef(model)[1],
    R_cuadrado = summary(model)$r.squared
  ) %>%
  select(-model)
library(dplyr)
coeficientes_hall <- data %>%
  group_by(Tipo, Corriente) %>%
  do(model = lm(Voltaje_Hall ~ Corriente, data = .)) %>%
  mutate(
    Pendiente_m = coef(model)[2],
    Intercepto = coef(model)[1],
    R_cuadrado = summary(model)$r.squared
  ) %>%
  select(-model)
coeficientes_hall <- data %>%
  group_by(Tipo, Corriente) %>%
  do(model = lm(Voltaje_Hall ~ Corriente, data = .)) %>%
  mutate(
    Pendiente_m = coef(model)[2],
    Intercepto = coef(model)[1],
    R_cuadrado = summary(model)$r.squared
  ) %>%
  select(-model)
library(tidyverse)
coeficientes_hall <- data %>%
  group_by(Tipo, Corriente) %>%
  do(model = lm(Voltaje_Hall ~ Corriente, data = .)) %>%
  mutate(
    Pendiente_m = coef(model)[2],
    Intercepto = coef(model)[1],
    R_cuadrado = summary(model)$r.squared
  ) %>%
  select(-model)
coeficientes_hall <- data_Ip_Constante %>%
  group_by(Tipo, Corriente) %>%
  do(model = lm(Voltaje_Hall ~ Corriente, data = .)) %>%
  mutate(
    Pendiente_m = coef(model)[2],
    Intercepto = coef(model)[1],
    R_cuadrado = summary(model)$r.squared
  ) %>%
  select(-model)
ls()
resultados <- coeficientes_hall %>%
  mutate(
    # Convertir Corriente a numérico para la predicción
    Corriente_num = as.numeric(as.character(Corriente)),
    # Predecir B_z usando la regresión lmCampo
    B_z = predict(lmCampo, newdata = data.frame(Corriente = Corriente_num)),
    # Definir omega
    omega = 1e-3,  # 1×10^{-3} m
    # Calcular R_H
    R_H = (Pendiente_m * omega) / B_z
  )
print(resultados)
library(kableExtra)
resultados %>%
  select(Tipo, Corriente, Pendiente_m, B_z, R_H) %>%
  kable(format = "latex", 
        digits = 4,
        col.names = c("Tipo", "Corriente (A)", "Pendiente (V/A)", "B_z (T)", "R_H (m³/C)"),
        caption = "Coeficientes de Hall calculados") %>%
  kable_styling(latex_options = c("striped", "hold_position"))
coeficientes_hall <- data %>%
  group_by(Tipo, Corriente_Ip) %>%
  do(model = lm(Voltaje_Hall ~ Corriente, data = .)) %>%
  mutate(
    Pendiente_m = coef(model)[2],
    Intercepto = coef(model)[1],
    R_cuadrado = summary(model)$r.squared
  ) %>%
  select(-model)
coeficientes_hall <- data_Ip_Constante %>%
  group_by(Tipo, Corriente_Ip) %>%
  do(model = lm(Voltaje_Hall ~ Corriente, data = .)) %>%
  mutate(
    Pendiente_m = coef(model)[2],
    Intercepto = coef(model)[1],
    R_cuadrado = summary(model)$r.squared
  ) %>%
  select(-model)
resultados %>%
  select(Tipo, Corriente, Pendiente_m, B_z, R_H) %>%
  kable(format = "latex", 
        digits = 4,
        col.names = c("Tipo", "Corriente (A)", "Pendiente (V/A)", "B_z (T)", "R_H (m³/C)"),
        caption = "Coeficientes de Hall calculados") %>%
  kable_styling(latex_options = c("striped", "hold_position"))
resultados <- coeficientes_hall %>%
  mutate(
    # Convertir Corriente a numérico para la predicción
    Corriente_num = as.numeric(as.character(Corriente)),
    # Predecir B_z usando la regresión lmCampo
    B_z = predict(lmCampo, newdata = data.frame(Corriente = Corriente_num)),
    # Definir omega
    omega = 1e-3,  # 1×10^{-3} m
    # Calcular R_H
    R_H = (Pendiente_m * omega) / B_z
  )
resultados <- coeficientes_hall %>%
  mutate(
    # Convertir Corriente a numérico para la predicción
    Corriente_num = as.numeric(as.character(Corriente)),
    # Predecir B_z usando la regresión lmCampo
    B_z = predict(lmCampo, newdata = data.frame(Corriente = Corriente_num)),
    # Definir omega
    omega = 1e-3,  # 1×10^{-3} m
    # Calcular R_H
    R_H = (Pendiente_m * omega) / B_z
  )
coeficientes_hall
resultados <- coeficientes_hall %>%
  mutate(
    # Convertir Corriente a numérico para la predicción
    Corriente_num = as.numeric(as.character(Corriente_Ip)),
    # Predecir B_z usando la regresión lmCampo
    B_z = predict(lmCampo, newdata = data.frame(Corriente = Corriente_num)),
    # Definir omega
    omega = 1e-3,  # 1×10^{-3} m
    # Calcular R_H
    R_H = (Pendiente_m * omega) / B_z
  )
resultados <- coeficientes_hall %>%
  mutate(
    # Convertir Corriente a numérico para la predicción
    Corriente_num = as.numeric(as.character(Corriente)),
    # Predecir B_z usando la regresión lmCampo
    B_z = predict(lmCampo, newdata = data.frame(Corriente = Corriente_num)),
    # Definir omega
    omega = 1e-3,  # 1×10^{-3} m
    # Calcular R_H
    R_H = (Pendiente_m * omega) / Corriente_num
  )
resultados <- coeficientes_hall %>%
  mutate(
    # Convertir Corriente a numérico para la predicción
    Corriente_num = as.numeric(as.character(Corriente_Ip)),
    # Predecir B_z usando la regresión lmCampo
    B_z = predict(lmCampo, newdata = data.frame(Corriente = Corriente_num)),
    # Definir omega
    omega = 1e-3,  # 1×10^{-3} m
    # Calcular R_H
    R_H = (Pendiente_m * omega) / Corriente_num
  )
resultados
resultados %>%
  select(Tipo, Corriente, Pendiente_m, B_z, R_H) %>%
  kable(format = "latex", 
        digits = 4,
        col.names = c("Tipo", "Corriente I_p (A)", "Pendiente (V/A)", "B_z (T)", "R_H (m³/C)"),
        caption = "Coeficientes de Hall calculados") %>%
  kable_styling(latex_options = c("striped", "hold_position"))
resultados %>%
  select(Tipo, Corriente_Ip, Pendiente_m, B_z, R_H) %>%
  kable(format = "latex", 
        digits = 6,
        col.names = c("Tipo", "Corriente I_p (A)", "Pendiente (V/A)", "B_z (T)", "R_H (m³/C)"),
        caption = "Coeficientes de Hall calculados") %>%
  kable_styling(latex_options = c("striped", "hold_position"))
resultados %>%
  select(Tipo, Corriente_Ip, Pendiente_m, B_z, R_H) %>%
  kable(format = "latex", 
        digits = 6,
        col.names = c("Tipo", "Corriente I_p (A)", "Pendiente (V/A)", "B_z (T)", "R_H (m³/C)"),
        caption = "Coeficientes de Hall calculados") %>%
  kable_styling(latex_options = c("striped", "hold_position"))
q()
q()
